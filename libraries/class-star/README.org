This library enhances the class definition idiom with saner defaults and more
slot and class options.  It wraps around the =hu.dwim.defclass-star= macro,
fixes a few bugs and adds a few more features:

- initform customization (such as zero values);
- type inference (optionally errors out when type cannot be inferred);
- predicate generation and customization (just like defstruct).

Metaclasses would not be very useful here since most of our features need to be
enacted at compile-time, while metaclasses are mostly useful on classe
/instances/.

=defclass/std= is another popular library with a similar goal, but with more
insistance on conciseness, maybe at the expanse of readability.  In particular,
it implements a way to specify slots by properties which may seem unnatural (we
read slots by their name, not by their properties).

* Features

- Implicit, customizable initarg and accessor like =defclass*=.
- Implicit, customizable initform.  The default =*type-zero-function*= derives
  the initform from the zero-value of basic types (e.g. 0 for integers, "" for
  strings) or raise a macro-expansion-time error for unsupported types.
  Other functions with different behaviours are provided, or you can provide your own.
- Implicit, customizable type inference from the initform.
- The initform can be specified as usual with =:initform= or directly in second
  position, right after the slot name.
- Class option to toggle the default slot exportation.
- The `:export' slot option allows to specify the exportation of individual slots.
- Implicit, customizable predicate generator.

* Examples

#+begin_src lisp
  (define-class foo ()
    ((slot1 :type integer) ; defaults to 0
     (slot2 "hello!" :type string)
     (unexported-slot :export nil))
    (:export-class-name-p t)
    (:export-accessor-names-p t)
    (:accessor-name-transformer #'class*:name-identity))

  (make-instance 'foo :my-slot1 17)
#+end_src

You can customize how to infer the default value.  For instance, to fall back to
nil when the type is not one of the known basic types (see =basic-type-zero-values=):

#+begin_src lisp
(define-class bar ()
  ((name :type class))
  (:type-zero-function #'nil-fallback-type-zero-function))
#+end_src

See the =*type-zero-function*= for the default inference function.

You can also set this option to nil, in which case you get the default behaviour
of no inference at all.

* References

- defclass/std:
  https://github.com/EuAndreh/defclass-std
  http://quickdocs.org/defclass-std/
- hu.dwim.defclass-star / defclass*:
  http://quickdocs.org/hu.dwim.defclass-star/api
  https://common-lisp.net/project/defclass-star/configuration.lisp.html
- Serapeum:
  https://github.com/ruricolist/serapeum/
  https://github.com/ruricolist/serapeum/issues/38
