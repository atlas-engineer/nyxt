#+TITLE:Nyxt WebExtensions API support library

This is a WebKitWebExtension library to support the necessary
[[https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Browser_support_for_JavaScript_APIs][JavaScript APIs]]. Most of the communication with the browser happens
via WebKitUserMessages. To hook into thi library in a WebKit-based
browser, connect to the [[https://webkitgtk.org/reference/webkit2gtk/stable/WebKitWebView.html#WebKitWebView-user-message-received]["user-message-received"]] signal and dispatch it
based on message name -- it will be the same as the JS function name
(e.g. "runtime.sendMessage").
* Extension initialization and extension descriptions
The extension should be initialized with used data. User data should
be a string GVariant containing JSON descriptions for extensions the
library should handle. The schema is:
#+begin_src js
  [
      {name : // Extension name as string
       [id, // ID as a string
        manifest, // full text of the extension manifest as a string
        is_privileged, // integer: 0 if non-privileged, 1 if privileged.
        [file_name : // string with a file name relative to the extension root
         url, // string URL to load this extension with. Right now should be a data: URL
         ... // same for all the files extension is allowed to access
        ]
       ]
      },
      ... // more extension descriptions
  ]
#+end_src

Initialization without user_data is not an option and crashes the view
it loads into. There used to be an option of user_data-less loading
(see
https://github.com/atlas-engineer/nyxt/commit/38b3b84a0e48e9a81ea1eb393c66c48531a0dc8c
and
https://github.com/atlas-engineer/nyxt/commit/dc51d55d478f1fb155aa7db99ae20e093b712e86),
but it's not there anymore.
* APIs and messages
Every message matching the JS API call passes certain parameters
(always a string GVariant, mostly containing JSON) that you can use to
process the call. Those are usually function arguments augmented by
some meta-information. Here are all the functions implemented so far
with the example parameters passed with the messages:
** tabs.query
The only parameter is the JSON-stringified =query-object= [[https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs/query][passed to the function]].
** tabs.create
The only parameter is the JSON-stringified =create-properties= [[https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs/create][passed to it]].
** tabs.getCurrent
Has no parameters (=NULL= instead of GVariant).
** tabs.get
Parameters are a integer ID of the tab passed as string.
** tabs.print
No parameters.
** tabs.sendMessage & runtime.sendMessage
Params are a JSON string object looking like
#+begin_src js
  {
      "extensionId" : string, // The ID of the extension sending the message
      "tabId" : number, // The ID of the tab receiving the message
      "message" : any // The actual message
  }
#+end_src
for tabs.sendMessage and
#+begin_src js
  {
      "extensionId" : string, // The ID of the extension sending the message
      "message" : any // The actual message
  }
#+end_src
for runtime.sendMessage.

The tabs.sendMessage/runtime.sendMessage is a complex piece of API
requiring a communication of several parts of the extension. So, what
you need to do is to:
- Get the message from one part of the extension.
- Parse it according to the schemas above.
- Find the matching recipient.
- Send a new WebKitUser message to this tab
  - Type should be "message".
  - Params should conform to the scheme that [[https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage#parameters][runtime.onMessage requires]]:
#+begin_src js
  {
      "sender" : object, // The description of the tab that sent the message
      "message" : any // The actual message
  }
#+end_src

Once this message is replied to by this library, you can reply to
original message with the reply contents (reply params will be a
JSON-serialized result of listeners of onMessage or undefined in case
nothing ran/there was an error).
** tabs.insertCSS
Params are:
#+begin_src js
  {
      "extensionId" : string, // The ID of the extension adding CSS
      "tabId" : number, // The ID of the tab to insert it to
      "css" : any // The actual CSS description
  }
#+end_src

FIXME: Right now this function doesn't wait for reply and simply
resolves after 10 milliseconds.
** tabs.removeCSS
Params are:
#+begin_src js
  {
      "extensionId" : string, // The ID of the extension removing CSS
      "tabId" : number, // The ID of the tab to remove it from
      "css" : any // The actual CSS description
  }
#+end_src

FIXME: Right now this function doesn't wait for reply and simply
resolves after 10 milliseconds.
** tabs.executeScript
Params are:
#+begin_src js
  {
      "extensionId" : string, // The ID of the extension executing a script
      "tabId" : number, // The ID of the tab to execute it in
      "script" : any // The actual script description
  }
#+end_src

FIXME: Right now this function doesn't wait for reply and simply
resolves after 10 milliseconds.
** management.getSelf
The parameters are an extension name as a string.
** runtime.getPlatformInfo
There are no parameters, but the response should be a valid [[https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/PlatformInfo][runtime.PlatformInfo]].
** runtime.getBrowserInfo
No params either, but response should pass valid [[https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/getBrowserInfo#return_value][runtime.BrowserInfo]].
** storage.<storageArea>.get, storage.<storageArea>.set, storage.<storageArea>.remove
Params are:
#+begin_src js
  {
      "extensionId" : string, // The ID of the extension requesting a storagae acces
      "keys" : string, array of string, or object // The keys to get values of
  }
#+end_src
** storage.<storageArea>.clear
The only parameter is the extension ID as a string.
