General-purpose keymap management.

This keymap library is inspired by [[https://savannah.nongnu.org/projects/emacsy][Emacsy]] (=keymap.scm=) which is inspired by
Emacs.

The main types are:

- A =key= structure has a hardware =code=, a symbolic =value=, an ordered set of
  modifiers (the order is to avoid inequality on permutation) and possibly more
  in the future.

  Whitespaces are the only reserved characters.  Anything else can be stored in
  the =key= value.

- A =keyspec= is a string representation of a =key=.  A =keyspecs= is a
  space-separated string representation of a sequence of =key='s.

- A =keymap= contains a hash-table where the keys are a =keyspec= and the values
  either a keymap or anything else.  As a special case, a =nil= value signifies
  to unbind the key.

Goals:

- Support prefix keys to other keymaps.  For instance, if you prefix my-mode-map
  with =C-c=, then all bindings for my-mode will be accessible after pressing =C-c=.
- List all bindings matching a given prefix.  (Also known as =which-key= in Emacs.)
- List the bindings associated to a command.
- Support multiple inheritance.
- Support keycode.
- Validate keyspec at compile time.
- ~define-key~ can set multiple bindings in a single call.
- Support multiple scheme to make it easy to switch between, say, Emacs-style
  and VI-style bindings.  This orthogonality to keymaps composes better than
  having multiple keymaps: changing scheme applies to the entire program, which
  is easier than looping through all keymaps to change them.
- Translate keyspecs as a fallback.  For instance if =shift-a= is not bound, check =A=.
- Behaviour can be customized with global parameters such as ~*print-shortcut*~.
- The ~compose~ function can merge multiple keymaps together.
- Support multiple arguments when that makes sense (e.g. multiple keymaps for ~lookup-key~).
- Key remapping Ã -la Emacs.
- Typed keymaps, i.e. keymaps where bound values can only be of a given type.
  This is convenient to catch typos, for instance when binding ='FOO= instead of
  =#'FOO=.

Non-goals:

- Customizable modifiers: The input system must decide how to map =meta=,
  =control=, etc.
- Dead key support:  The input system must handle it.
- Fallback function when binding is not found: The caller of =lookup-key= gets
  =nil= when a unbound, thus it can decide of a default behaviour.
- Provide a self-insert function: the caller must handle it.
- Global or local bindings: it's up to the calling application to manage the
  locality of their keymaps.
