#+TITLE: Next User Manual
Next is the next generation browsing experience designed for
power users. 100% of the functions and classes are exposed to the
end-user allowing for infinite customization.

* Contents                                                              :TOC:
:PROPERTIES:
:TOC:      this
:END:
-  [[#getting-help][Getting help]]
-  [[#basics][Basics]]
  -  [[#navigation][Navigation]]
  -  [[#zooming-page][Zooming page]]
  -  [[#jumping-to-links-element-hints][Jumping to links (element-hints)]]
  -  [[#visiting-urls][Visiting URLs]]
  -  [[#searching-via-search-engine][Searching via search engine]]
  -  [[#autofill][Autofill]]
  -  [[#jumping-to-headings][Jumping to Headings]]
  -  [[#input-minibuffer][Input (Minibuffer)]]
  -  [[#multi-selection][Multi-selection]]
  -  [[#buffers-tabs][Buffers ("tabs")]]
    -  [[#modes][Modes]]
    -  [[#windows-vs-buffers][Windows vs. buffers]]
  -  [[#searching][Searching]]
  -  [[#history][History]]
  -  [[#bookmarks][Bookmarks]]
  -  [[#download-manager][Download manager]]
  -  [[#opening-files][Opening files]]
  -  [[#exiting][Exiting]]
  -  [[#proxy-and-tor-support][Proxy and Tor support]]
  -  [[#certificate-host-whitelisting][Certificate host whitelisting]]
  -  [[#cloning-git-repositories][Cloning Git repositories]]
  -  [[#downloading-videos][Downloading videos]]
  -  [[#password-manager][Password manager]]
-  [[#advanced-topics][Advanced Topics]]
  -  [[#execute-extended-command][Execute Extended Command]]
  -  [[#slime-with-a-compiled-version-of-next][SLIME with a compiled version of Next]]
  -  [[#command-line-parameters-and-environment][Command line parameters and environment]]
    -  [[#environment-variables][Environment variables]]
    -  [[#multiple-profiles][Multiple profiles]]
    -  [[#scripts][Scripts]]
    -  [[#send-code-to-a-running-instance][Send code to a running instance]]
-  [[#customization][Customization]]
  -  [[#keybinding][Keybinding]]
    -  [[#keymaps-and-key-binding-schemes][Keymaps and key binding schemes]]
    -  [[#modifier-translation][Modifier translation]]
    -  [[#override-map][Override map]]
    -  [[#vi-style-bindings][VI-style bindings]]
  -  [[#start-up-options][Start-up options]]
    -  [[#using-the-session][Using the session]]
  -  [[#decide-how-to-open-files][Decide how to open files]]
  -  [[#loading-lisp-files][Loading Lisp files]]
  -  [[#creating-your-own-interactive-commands][Creating your own interactive commands]]
  -  [[#getting-input-from-the-user][Getting input from the user]]
  -  [[#network-resource-dispatch-including-ad-blocking][Network resource dispatch (including ad-blocking)]]
    -  [[#resource-blocking-ad-blocking][Resource blocking (Ad-blocking)]]
  -  [[#styles][Styles]]
  -  [[#hooks][Hooks]]
    -  [[#list-of-available-hooks][List of available hooks]]
  -  [[#startup-behavior][Startup behavior]]
  -  [[#run-next-in-a-security-sandbox][Run Next in a security sandbox]]
-  [[#troubleshooting][Troubleshooting]]
  -  [[#font-size-on-hidpi-displays][Font size on HiDPI displays]]
  -  [[#stumpwm-mouse-scroll][StumpWM mouse scroll]]

* Getting help

Next is "self-documented", which means that you can display the documentation of
all Next components within the browser itself.

Help is accessed via various "describe" commands.

Press =M-x= (that is, =Alt= plus =x= or =Command= plus =x=) to bring up the list
of commands, then write =describe=.  You should now see a list of all help
commands, such as =describe-command=.

* Basics
** Navigation
Within a buffer, all navigation is possible using only the keyboard. To
navigate up and down on a web page, the following keybindings are
provided.

1. ~C-n~: Move down
2. ~C-p~: Move up
3. ~scroll-left~: Move left (no keybindings for now)
4. ~scroll-right~: Move right (no keybindings for now)
5. ~M->~: Jump to bottom of page
6. ~M-<~: Jump to top of page

_Note_:  Next also ships [[#vi-style-bindings][VI-style keybindings]].

** Zooming page
Use the zoom keybindings to make everything on a web page larger or smaller.

1. ~C-x +~, ~C-x C-+~ and ~C-x C-=~: Increase size
2. ~C-x C--~, ~C-x -~: Decrease size
3. ~C-x 0~, ~C-x C-0~: Restore defaults

** Jumping to links (element-hints)
In order to visit a link, one never has to remove their fingers from
the keyboard. It works like this:

1. Type the hotkey to show the hints: ~C-g~
2. Several strings will appear on screen "AZ" "CY", these
   special strings represent elements that you can interact with
3. Enter in one of these strings into the minibuffer
4. Press ~return~
5. Visit the page

The full key-bindings for link-hint based navigation are found below:

1. ~C-g~: Go to link in current buffer
2. ~M-g~: Create new buffer with link, focus on new buffer
3. ~C-u M-g~: Create new buffer with link, keep focus on current buffer

** Visiting URLs
When ambiguous URLs are inputted, Next will attempt the best guess
about what the user wishes. If the user does not supply a protocol in
a URL, ~https~ will be assumed. To visit a site supporting only
~http~, the user must explicitly type the full URL with ~http~
included.

1. ~C-l~: Change URL of current buffer
2. ~M-l~: Open a new buffer and set its URL

** Searching via search engine
From the new URL prompt, any input that is not recognized as a URL will be
searched using the default search engine.  Any query that starts with a known
search engine prefix will use the corresponding search engine for the query.

For instance, to search "parrot" on Wikipedia:
- =C-l= or =M-l= to open a new URL prompt.
- =wiki parrot=
- =return=

From a Lisp REPL, you can query the list of search engines with
#+begin_src lisp
(search-engines *browser*)
#+end_src

It will return something like

#+begin_src lisp
'(("default"
   "https://duckduckgo.com/?q=~a"
   "https://duckduckgo.com/")
  ("wiki"
   "https://en.wikipedia.org/w/index.php?search=~a"
   "https://en.wikipedia.org/"))
#+end_src

The =~a= in the search engine URI is a place holder for the search pattern.

You can set the list of search engines in your init file:

#+begin_src lisp
(define-configuration browser
  ((search-engines (append (list '("yt"
                                   "https://www.youtube.com/results?search_query=~a"
                                   "https://www.youtube.com/"))
                           %slot-default))))
#+end_src

See the documentation of ~define-configuration~ and ~search-engines~.

** Autofill
Like other browsers, Next has the ability to do auto filling. You can
specify any type of key and value to fill in. To autofill run the
command =autofill=. To customize the autofill values available, use
the slot in the browser class:

#+NAME: autofills
#+BEGIN_SRC lisp
(define-configuration browser
  ((autofills (list (make-autofill :key "Name" :fill "My Name")
                    (make-autofill :key "Function example"
                                   :fill (lambda () (format nil "hello!")))))))
#+END_SRC

As can be seen in the above example, the fill does not need to be a
string value, it can also be a function, allowing you to provide an
even smarter autofill.

** Jumping to Headings
Jumping to different headings based on fuzzy completion is available
via the =jump-to-heading=.

** Input (Minibuffer)
All input is handled within a special area called the minibuffer. The
minibuffer will appear at the bottom of the screen when the user is
responsible for inputting some value. The minibuffer may also suggest
completions.

Any time a function activates the minibuffer there are two applicable
returns:

1. ~C-return~: Return Immediate - Return EXACTLY what has been typed into
   the minibuffer, ignoring completions.
2. ~return~: Return Complete - If completion function provided, return
   the selected completion candidate. If a completion is not provided,
   return the EXACT text inputted into the minibuffer. If a completion
   function provided, no completion applicable (selected), and the
   :empty-complete is a truthy value, the function will accept the
   EXACT text inputted into the minibuffer.

** Multi-selection

For some commands (e.g. for the =delete-buffer= command), multiple
entries can be marked.  The default bindings are:

- =C-space= to toggle the mark of an entry.
- =M-a= to mark all visible entries.
- =M-u= to unmark all visible entries.

When the input is changed and the candidates are re-filtered, the
selection is not altered even if the marked elements don't show.

When at least one candidate is marked, only the marked candidates are
processed upon return.  The candidate under the cursor is not
processed if not marked.

** Buffers ("tabs")
Many browsers implement the concept of multiple views with "tabs".  Tabs are
inherently flawed as they don't scale: it's hard to manage more than a few dozen
of them.

In Next, multiple views are implemented as "buffers".  Each buffer can use its
own set of "modes".  A mode is a collection of settings, key bindings, commands,
etc.  Regular web pages use the ~web-mode~ by default.

The standard commands for buffer management are:

- =switch-buffer=
- =switch-buffer-next=, =switch-buffer-previous=
- =delete-buffer=
- =delete-current-buffer=
- =set-url=, =set-url-new-buffer=

*** Modes
A mode is a collection of features, ranging from key bindings to network
options.  It can be enabled or disabled on a per-buffer basis via the command of
the same name, e.g. ~vi-normal-mode~.

Each buffer has its own list of modes.  The first mode in the list has highest
priority: this is important, for instance, to determine which key binding takes
precedence in case of conflict.  See [[Keybinding]] for more details.

Modes are CLOS objects that are instantiated per-buffer.  No buffer shares the
same instance of a mode (by default at least).

Modes are typically defined in their separate Common Lisp package.  This allows
for defining mode-specific functions and variables in a separate namespace.


To enable a mode for all buffers by default, add the mode to the list of
default modes:

#+begin_src lisp
(define-configuration buffer
  ((default-modes (append '(vi-normal-mode) %slot-default))))
#+end_src

*** Windows vs. buffers

When opening a link from an external program, or when clicking on a link while
=C= is pressed, Next can load the URL either

- in a new window if =(open-external-link-in-new-window-p *browser*)= is
  non-nil;
- in a new buffer.

You can change the default behavior by adding the following to your
configuration file:

#+begin_src lisp
(define-configuration browser
  ((open-external-link-in-new-window-p t)))
#+end_src

** Searching
There are a number of commands provided to enable searching within
a buffer.

- =search-buffer=: Search for a given term. This command will place a hint
   next to every match on a given web-page.
- =search-buffers=: Same as above, but search of the selected buffers.
- =remove-search-hints=: Clear search. Remove the search hints from the screen.

** History
History is represented as a tree that you can traverse. More complex
than the "forwards-backwards" abstraction found in other browsers,
the tree makes sure you never lose track of where you've been.

In the example below, the user performs the following actions:

1. Starts page ~Athens~
2. Visits page ~Ancient Greek~
3. Returns to page ~Athens~
4. Visits page ~Classical Athens~
5. Returns to page ~Athens~
6. Executes ~forwards~ keybind in history

It is at this point that a normal browser would /not/ be able to
navigate you forwards to your visit of ~Ancient Greek~. Instead of
erasing your history, Next offers smart navigation and prompts the
user. Do you wish to go forwards to ~Ancient Greek~ or to
~Classical Athens~?

The standard commands for forward-backward navigation are:

- =history-forwards=, =history-backwards=
- =history-forwards-query=, =history-backwards-query=: Jump to any of the
  forward, respectively backward history entries.
- =history-forwards-maybe-query=: Like =history-forwards= but query when
  the history forward is branching.
- =history-forwards-all-query=: Jump to any of the forward history entries
  across all forward branches.
- =history-all-query=: Jump to any history entry.

By using navigate forward tree you will be prompted for which branch
you'd like to visit as in the example above. The simple navigate
forward command will simply visit the first child of the current node
in the tree.

You can also view a full tree of the history for a given buffer by
invoking =buffer-history-tree=.

** Bookmarks

In order to navigate and manage your bookmarks, a few commands are
provided:

- =bookmark-current-page=
- =bookmark-page=: Query the buffer to bookmark.
- =bookmark-url=: Bookmark input URL via minibuffer
- =bookmark-hint=
- =set-url-from-bookmark=
- =bookmark-delete=
- =show-bookmarks=

Bookmarks can have tags, a shortcut string, a search-url and a
timestamp.

You can filter them with selectors: use =+=, =-= or write a compound
query inside parenthesis in which you can use =and=, =or= and =not=.

For example:

: +lisp -blog
: +blog (or lisp emacs)
: +foo -bar (or (and john doe) (not (and tic tac)))

Bookmarks are stored in a plain text format, so than you can read and
manipulate them easily with any other program. The bookmarks file is called =bookmarks.lisp= and is stored in Next's data directory (see [[#environment-variables][environment variables]]).

** Download manager

When you  download a file,  you are  taken to a  =*Downloads*= buffer,
which  shows the  ongoing  download  progress and  the  list of  files
downloaded during the current session.   You can switch to this buffer
as usual, and also with =M-x download-list=.

To open  a file, use  =M-x download-open-file=. See  the customization
section to control how files are open.

** Opening files

With =M-x open-file= (bound to =C-x  C-f=), you are prompted a list of
files, and you can select one with the usual fuzzy completion. You can
go one directory  up with =M-Left= or =C-l=, and  enter the directory
at point with =M-Right= or =C-j=.

Next will open itself directories and supported media types, otherwise
it will try to open the file with the system's default using
=xdg-open= or =open=.  See the command help for further details, and
the customization section to override the default behavior.

** Exiting
To exit Next use the =quit= command. By default, the list of buffers, the
cookies (e.g. authentication information) are persisted.
Form data that was not sent to a web page will *not* be persisted for now, but
it's a planned feature.

** Proxy and Tor support

You  can  surf  the  web  behind   a  proxy  by  issuing  the  command
=proxy-mode=. Its default server address is =socks5://localhost:9050=,
meaning it works out of the box for Tor.

You can change the default proxy with

#+begin_src lisp
(setf next/proxy-mode:*default-proxy*
      (make-instance 'proxy :server-address "protocol://your.i.p:port"))
#+end_src

At the time of writing, there are differences between the GTK and the
Qt renderers: the GTK one sets proxies per-buffer, whereas it is currently
global for the Qt one.

To enable proxy for all buffers by default, add the proxy mode to the default
modes.  See [[Modes]] for details.

** Certificate host whitelisting

By default Next refuses to establish a secure connection to a host with an
erroneous certificate (e.g. self-signed ones).  This could mean that the address
you are attempting the access is compromised.  If you trust the address
nonetheless, you can add an exception for the current hostname with
=add-domain-to-certificate-whitelist=.  The =certificate-whitelist-mode= must be
active for the current buffer (which is the default).

You can persist hostname exceptions in your init file, see
=add-domain-to-certificate-whitelist= documentation.

** Cloning Git repositories

Use the =vcs-clone= (alias =git-clone=) command to clone a Git repository to
disk.  It asks you for the destination and then runs asynchronously.

By default, the command looks into the directories specified in
=next/vcs:*vcs-projects-roots*=.

You can change the list like this:

#+begin_src lisp
(setf next/vcs:*vcs-projects-roots* '("~/src" "~/work" "~/my/directory"))
#+end_src

When there is one single choice, it doesn't ask for confirmation.

You can set your username for GitHub and other forges.  It helps the
clone command in doing the right thing©. For example, if it sees that
you are cloning a repository of yours (the user/organization name of
the cloned repository equals your vcs-username), it will use a git remote
url instead of https.

Set your default username in =next/vcs:*vcs-username*=.

You can also change the =*vcs-username-alist*=:

#+begin_src lisp
(setf next/vcs:*vcs-usernames-alist* '(("github.com" . "")
                                       ("gitlab.com" . "")
                                       ("bitbucket.org" . "")))

;; or
(push '("myforge.com" . "me") next/vcs::*vcs-usernames-alist*)
#+end_src

Note that the forge name should be a domain, such as =github.com=.

** Downloading videos

The command =M-x download-video= will try to download the video at the
current URL. For example, it works with any YouTube video.

It will ask for a target repository and will notify on success or
failure.

By default it relies on the external [[http://ytdl-org.github.io/youtube-dl/][youtube-dl]] program.

To customize it, see all the variables and functions in [[https://github.com/atlas-engineer/next/blob/master/source/video-mode.lisp][video-mode]].

** Password manager

Next provides a password manager interface to [[https://keepassxc.org/][KeepassXC]] or [[https://www.passwordstore.org/][Pass]].

The two commands to know to use it are =save-new-password= and
=copy-password=, to choose a password from the minibuffer and to copy
it to the clipboard.

* Advanced Topics
** Execute Extended Command
You can execute any command by name by typing =M-x=. This will bring up a list
of candidates that you can fuzzily complete.

** SLIME with a compiled version of Next
=SLIME= provides a way of interacting with Next, and with Lisp code in
general (e.g. in a [[https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop][REPL]]).

From the SLIME manual:
#+begin_quote
SLIME extends Emacs with support for interactive programming in Common
Lisp. The features are centered around slime-mode, an Emacs minor-mode
that complements the standard lisp-mode. While lisp-mode supports
editing Lisp source files, slime-mode adds support for interacting
with a running Common Lisp process for compilation, debugging,
documentation lookup, and so on.
#+end_quote

To use SLIME with a compiled version of Next run the command
=start-swank= launch a Swank server. SLIME will connect to the Swank
server and give you completion, debugging, documentation, etc. The
port for Swank is define in ~*swank-port*~ and its default value is
different from that of Swank on Emacs to avoid collisions with an
Emacs ~*inferior-lisp*~ process.

After launching the Swank server in Next, execute the following within Emacs:

1. ~M-x~
2. ~slime-connect~
3. Enter ~127.0.0.1~ for the host
4. Enter the port number set in the Next variable ~*swank-port*~ (e.g. ~4006~)

To customize the port that Swank starts on, edit the global variable
~*swank-port*~ in your init file.

** Command line parameters and environment
*** Environment variables
By default Next stores its files in these locations.

- =$XDG_CONFIG_HOME/next/=: For the =init.lisp= user configuration.
- =$XDG_DATA_HOME/next/=: For all the automatically generated data, like
  sessions, bookmarks, cookies, etc.

If $XDG_CONFIG_HOME= is not set, it defaults to =$HOME/.config=. The default for =$XDG_DATA_HOME= is =$HOME/.local/share=.
*** Multiple profiles
It's possible to manage multiple profiles, for example an instance of Next for
work, another one for private browsing.

For instance, to start a "private", ephemeral session, run

#+begin_src sh
XDG_DATA_HOME=/tmp/private/ next ; rm -rf /tmp/private/next
#+end_src

*** Scripts

You can evaluate code from the command line with =--eval= and =--load=.

#+begin_src sh
$ next --no-init --eval '+version+' \
  --load my-lib.lisp --eval '(format t "Hello ~a!~&" (my-lib:my-world))'

2.0.0
NIL
#+end_src

Note that you can evaluate multiple =--eval= and =--load= in a row, they are
executed in the order they appear.

You can evan make scripts.  Here is an example =foo.lisp=:

#+begin_src lisp
#!next --script
(format t "~a~&" +version+)
#+end_src

*** Send code to a running instance
=--eval= and =--load= can be commanded to operate over an existing instance
instead of a separate instance that exits immediately.

To let know a private instance of Next to load a =foo.lisp= script and run it's
=foo= function:
#+begin_src sh
XDG_DATA_HOME=/tmp/private/ next --remote --load foo.lisp --eval '(foo)'
#+end_src

* Customization
All customization begins by creating a =~/.config/next/init.lisp=
file.  Within your init file you can write your own keybindings and
customizations. If the directory =~/.config/next/= does not already
exist, you will have to make it.

You can then write or override any functions and variables.

When you are done, you can load your changes while Next is running
with the command =load-init-file=. Or load any file with =load-file=
(=C-o=).

Next will do its best to warn you about syntax and type errors in the init file.


** Keybinding
Keys are defined with the ~define-key~ command.

#+NAME: define key
#+BEGIN_SRC lisp
(defvar *my-keymap* (make-keymap "my-map")
  "My keymap.")

(define-key *my-keymap*
  "C-x o" #'example
  "space" #'scroll-page-down)
#+END_SRC

In the previous example, the key sequence =C-x o= would invoke the ~example~
command.
If later another command is bound to =C-x=, all other bindings starting with
=C-x= will be overridden.

/Modifiers/ are keys that can only be used in combination with other keys:

- ~C~: Control
- ~S~: Super (Windows key, Command Key)
- ~H~: Hyper key
- ~M~: Meta (Alt key, Option Key)
- ~s~: Shift key

*** Keymaps and key binding schemes

A keymap is a collection of key-to-command bindings.

Modes can define key binding schemes, which are sets of keymaps indexed by a
scheme name like =scheme:emacs=.

The currently active key binding scheme is selected by the ~keymap-scheme-name~
buffer slot.  When a key is hit, Next looks up the keymaps of the corresponding
scheme for all active modes in the current buffer.

You can change the default binding scheme for any buffer by setting
~keymap-scheme-name~ to the appropriate value.  Here follows a minimal example
to switch to the Emacs scheme:

#+begin_src lisp
(define-configuration buffer
  ((keymap-scheme-name scheme:emacs)))
#+end_src

To create a keymap, use the ~make-keymap~ function.

The user can define key bindings by creating a mode that is loaded before any
other mode.  In your configuration file:

#+begin_src lisp
(defvar *my-keymap* (make-keymap)
  "Keymap for `my-mode'.")

(define-mode my-mode ()
  "Dummy mode for the custom key bindings in `*my-keymap*'."
  ((keymap-schemes :initform (keymap:make-scheme
                              scheme:emacs *my-keymap*
                              scheme:vi-normal *my-keymap*))))

(define-configuration buffer
  ((default-modes (append '(my-mode) %slot-default))))
#+end_src

*** Modifier translation

You can customize the behavior of modifiers in arbitrary ways thanks to the
~modifier-translator~ slot of the ~browser~ class.

For instance, if you want swap ~control~ and ~meta~:

#+begin_src lisp
(defun my-translate-modifiers (modifier-state &optional event)
  "Swap control and meta."
  (declare (ignore event))
  (let ((plist '(:control-mask "meta"
                 :mod1-mask "control"
                 :shift-mask "shift"
                 :super-mask "super"
                 :hyper-mask "hyper")))
    (delete nil (mapcar (lambda (mod) (getf plist mod)) modifier-state))))

(define-configuration browser
  ((modifier-translator #'my-translate-modifiers)))
#+end_src

*** Override map

The /override map/ is the first keymap that is looked up for a binding when a
key is pressed.  Override maps are stored in every buffer.  They are exposed to
the user as a mean to override any binding from any mode.  They should not be
modified by any library.

*** VI-style bindings

[[https://en.wikipedia.org/wiki/Vi][VI]] is a modal text editor that is famous for its /modal/ key bindings.
In /normal mode/, all keys are commands, they won't insert any text anywhere.

In /insert mode/, all textual keys insert the corresponding text.

Next offers two modes, =vi-normal-mode= and =vi-insert-mode= to simulate this
behavior.  For instance, in =vi-normal-mode=, =j= scrolls the page down and =k=
scrolls up.

To go from /normal mode/ to /insert mode/, press =i=.
To go from /insert mode/ to /normal mode/, press =ESCAPE=.

Some default keybindings for ~vi-normal-mode~ are:

#+BEGIN_SRC conf
"Z Z": kill
"[": switch-buffer-previous
"]": switch-buffer-next
"g b": switch-buffer
"d": delete-buffer
"D": delete-current-buffer
"B": make-visible-new-buffer
"o": set-url
"O": set-url-new-buffer
"m u": bookmark-url
"m d": bookmark-delete
"C-o": load-file
"C-h v": variable-inspect
"C-h c": command-inspect
":": execute-command
"W": new-window
#+END_SRC

The minimal config that sets your Next in vi mode, is:

#+BEGIN_SRC lisp
(define-configuration buffer
  ((default-modes (append '(vi-normal-mode) %slot-default))))
#+END_SRC

** Start-up options

The =next= command accepts URLs as parameters, as well as some options.

Run =next --help= to list all available options.

*** Using the session

By default, Next will restore the previous session, and save the
current one to disk.

You can disable this behavior with a command line option:

: next --no-session

or in your init file:

#+begin_src lisp
(define-configuration browser
  ((session-path nil)))
#+end_src

To quit Next without saving the session, use the command
=quit-after-clearing-session=.

** Decide how to open files

The commands =open-file= and =download-open-file= call the function
=next/file-manager-mode:open-file-function <filename>=.

You can override this behavior by binding another function to the
variable =next:*open-file-function*=, in which you can fallback to the
default function.

For example, below we open directories with =emacsclient= and some music ad
videos with =mpv=:

#+begin_src lisp
(defun my-open-files (filename)
  "Open music and videos with mpv, open directories with emacsclient."
  (let ((args)
        (extension (pathname-type filename)))
    (cond
      ((uiop:directory-pathname-p filename)
       (log:info "Opening ~a with emacsclient." filename)
       (setf args (list "emacsclient" filename)))

      ((member extension '("flv" "mkv" "mp4") :test #'string-equal)
       (setf args (list "mpv" filename))))

    (handler-case (if args
                      (uiop:launch-program args)
                      ;; fallback to Next's default.
                      (next/file-manager-mode:open-file-function filename))
      (error (c) (log:error "Error opening ~a: ~a" filename c)))))

(setf next/file-manager-mode:*open-file-function* #'my-open-files)
#+end_src

** Loading Lisp files

To load a Lisp file use the =load-file= command. Within the minibuffer prompt
enter the full path to the file you wish to load.

For convenience, the ~load-init-file~ command directly reloads your init file.

** Creating your own interactive commands
Creating your own invokable commands is the same as creating any other
~defun~ except the form is ~define-command~. A docstring is highly
recommended and will produce a style warning when it is missing.

An example of a trivial command definition can be seen below.

#+NAME: bookmark-url
#+BEGIN_SRC lisp
(define-command bookmark-url ()
  "Allow the user to bookmark a URL via minibuffer input."
  (with-result (url (read-from-minibuffer
                     (make-minibuffer
                      :input-prompt "Bookmark URL")))
    (bookmark-add url)))
#+END_SRC

These functions will help you retrieve information:

- =(current-buffer)= returns the current, visible buffer in Next.
- Use the =(url …)= and =(title …)= buffer accessors to get the URL
  and the title.
- =(buffers *browser*)= returns a hash-table of all the buffers in
  the current session. The keys are the buffers =id= (a string), the
  values the buffer object.

** Getting input from the user
Getting input from the user via the minibuffer is an asynchronous
command. That is why the ~read-from-minibuffer~ function is wrapped
within a continuation-passing-style macro ~with-result~. The form
therefore takes the following look:

#+NAME: read-from-minibuffer-example
#+BEGIN_SRC lisp
(with-result (variable-name-to-bind-minibuffer-input
              (read-from-minibuffer (make-minibuffer ...)))
  (do-something-with variable-name-to-bind-minibuffer-input))
#+END_SRC

** Network resource dispatch (including ad-blocking)

The dispatching of network queries can be fully customized in the
=request-resource-hook= slot of the =buffer= class.

See the ~request-resource~ function for an example which dispatches
downloads, new window requests, etc.

This hook can also serve as an entry point to URL-based resource blocking.

*** Resource blocking (Ad-blocking)

Next provides the =blocker-mode=.  It filters networks requests (including
ads) by the host name.  There is a default filter list that gets automatically
updated, =next/blocker-mode:*default-hostlist*=.

Multiple lists of hosts can be added and blocker mode will filter based on all
the lists.

To add a list, add an instance of the ~hostlist~ class to the ~hostlists~ slot
of =blocker-mode=.

Example:

#+begin_src lisp
(defvar *my-blocked-hosts*
  (next/blocker-mode:make-hostlist
   :hosts '("platform.twitter.com"
            "syndication.twitter.com"
            "m.media-amazon.com")))

(define-configuration next/blocker-mode:blocker-mode
  ((next/blocker-mode:hostlists (append (list *my-blocked-hosts*) %slot-default))))

(define-configuration buffer
  ((default-modes (append '(blocker-mode) %slot-default))))
#+end_src

The =hostlist= class also support fetching the list from a URL.
The list can be persisted to the file specified in the =path= slot.

** Styles

Some actions will draw elements on the HTML page.

The style of those boxes is defined in the ~box-style~ slot of the ~buffer~
class.

Like any other slot, you can set the default value from your ~init.lisp~.  For instance,
to change the style to using upper case, no gradient, and square boxes:

#+begin_src lisp
(define-configuration buffer
  ((box-style (cl-css:inline-css
               '(:background "#C38A22"
                 :color "black"
                 :border "1px #C38A22 solid"
                 :font-weight "bold"
                 :padding "1px 3px 0px 3px"
                 :padding "1px 3px 0px 3px"
                 :position "absolute"
                 :text-align "center"
                 :text-shadow "0 3px 7px 0px rgba(0,0,0,0.3)")))))
#+end_src

** Hooks

A /hook/ holds a list of /handlers/.
Handlers are specialized functions

Hooks can be /run/, that is, their handlers are run according to the
=combination= slot of the hook.  This combination is a function of the handlers.

Hooks are exposed to the users so that they can customize the behavior of
specific actions in arbitrary ways.

Many hooks are executed at different points in Next, among others:

- Global hooks, such as ~*after-init-hook*~.
- Window or buffer related hooks.
- Commands "before" and "after" hooks.
- Modes "enable" and "disable" hooks.

For instance, if you want to force =old.reddit.com= over =www.reddit.com=, you
can set a hook like the following in your =~/.config/next/init.lisp=:

#+begin_src lisp
(defun old-reddit-hook (url)
  (let* ((uri (quri:uri url)))
    (if (search "www.reddit" (quri:uri-host uri))
        (progn
          (setf (quri:uri-host uri) "old.reddit.com")
          (let ((new-url (quri:render-uri uri)))
            (log:info "Switching to old Reddit: ~a" new-url)
            new-url))
        url)))

(define-configuration buffer
  ((set-url-hook (hooks:make-hook-string->string
               :handlers (list #'old-reddit-handler)
               :combination #'hooks:combine-composed-hook))))
#+end_src

Some hooks like the above example expect a return value, so it's important to
make sure we return ~url~ here.  See the documentation of the respective hooks
for more details.

*** List of available hooks

- *Commands* hooks

  All commands  have an associated  "before" and "after" list  of hooks:
  the =help= command has =help-before-hook= and =help-after-hook=.

  To add a hook handler, call =add-hook=:

  #+begin_src lisp
  (defun hello-hook ()
    (log:info "hello"))

  (add-hook help-before-hook
    (next-hooks:make-handler-void #'hello-hook))
  #+end_src

  Now when you press =M-x help=, you'll see

  : <INFO> [18:15:45] next (hello-hook) - hello

- *Initialization and exit* hooks

  - =after-init-hook=: Hook run after both the Lisp side and the
  platform port have started.
    - argument: None.
  - =before-exit-hook=: Hook run before both the Lisp side and the
  platform port get terminated.
    - argument: None.

- *Networking* hooks

  - =set-url-hook=: Hook  run after the URL  to be visited was  parsed. The
    URL isn't loaded yet.
    - argument: The URL that is going  to be visited.
    - return: Handlers must return a (possibly new) URL (see example above).

- *Window* hooks

  - =window-make-hook=:  Hook run  after the  window is  created on  the
    platform port.
    - argument: The window.
  - =window-delete-hook=: Hook run before the window is deleted.
    - argument: The window.
  - =window-set-active-buffer-hook=: Hook run before the given buffer is
    added to the window and marked the active buffer.
    - arguments: The window and the buffer.

- *Buffer* hooks

  - =buffer-make-hook=:  Hook run  after the  buffer is  created on  the
    platform port.
    - argument: The buffer.
  - =buffer-delete-hook=: This hook is run  before the buffer is deleted
    on the platform port.
    - argument: The buffer object.

- *Download* hooks

  - =before-download-hook=: hook run before downloading a URL.
    - argument: The URL.
  - =after-download-hook=: Hook run after a download has completed.
    - argument: The =download-manager:download= class instance.

- *Mode* hooks

  - =enable-hook=: This hook is run when enabling the mode.
    - argument: The mode.
  - =disable-hook=: This hook is run when disabling the mode.
    - argument: The mode.

** Startup behavior

The default action of Next is to run =startup-function= of the =browser= class.

~startup-function~ defaults to ~default-startup~ and takes URLs that are passed
to Next as command line arguments.

You can assign your own function to ~startup-function~ to change the behaviour of
Next on startup, such as which URL it should display, if it should restore the
previous session or not, etc.

** Run Next in a security sandbox
For improved security while you browse the Internet, you can run Next in a
container on GNU/Linux.

- With Guix:
  #+begin_src sh
  guix environment --container --network --expose=/etc/ssl/certs --ad-hoc coreutils nss-certs next -- env DISPLAY="$DISPLAY" next
  #+end_src

  If you want to load your configuration and use the data files:

  #+begin_src sh
  guix environment --container --network --expose=/etc/ssl/certs --expose="$HOME/.config/next/" --share="$HOME/.local/share/next"="$HOME/.local/share/next/" --ad-hoc coreutils nss-certs next -- env DISPLAY="$DISPLAY" next
  #+end_src

  If you get an error like

  : libGL error: failed to open /dev/dri/card0: No such file or directory

  add the =--expose=/dev/dri/card0= option (change the path accordingly).

- With [[https://firejail.wordpress.com/][Firejail]].

* Troubleshooting

** Font size on HiDPI displays

On HiDPI displays the font size used for displaying web and Next's minibuffer content might be too tiny.

To fix this issue for the GTK port use this

#+begin_src sh
export GDK_SCALE=2
export GDK_DPI_SCALE=0.5
next
#+end_src

** StumpWM mouse scroll

If the mouse scroll does not work for you, see the [[https://github.com/stumpwm/stumpwm/wiki/FAQ#my-mouse-wheel-doesnt-work-with-gtk3-applications-add-the-following-to][StumpWM FAQ]] for a
fix.


# Local Variables:
# before-save-hook: org-make-toc
# End:
