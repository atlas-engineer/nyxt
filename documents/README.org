* Next Developer Readme                                                 :TOC:
- [[#developer-installation-with-guix][Developer Installation with Guix]]
- [[#generic-developer-installation][Generic Developer Installation]]
  - [[#installing-sbcl][Installing SBCL]]
  - [[#installing-quicklisp-optional][Installing Quicklisp (optional)]]
  - [[#gnulinux-specific-dependencies][GNU/Linux specific dependencies]]
  - [[#macos-specific-dependencies][macOS specific dependencies]]
  - [[#fetch-the-source-code][Fetch the source code]]
  - [[#compile][Compile]]
  - [[#run][Run]]
  - [[#run-from-source][Run from Source]]
  - [[#update-local-lisp-libraries][Update local Lisp libraries]]
- [[#help--community][Help & Community]]
  - [[#learning-common-lisp][Learning Common Lisp]]
  - [[#contribution][Contribution]]
  - [[#irc-channel][IRC Channel]]

* Developer Installation with Guix
Install [[https://guix.gnu.org][Guix]] and follow the instructions in [[../build-scripts/guix.scm]].

* Generic Developer Installation
Next is written in Common Lisp. It can be built with any standard
Common Lisp implementation. Currently, only [[http://www.sbcl.org/][SBCL]] support is tested.

It is designed to be cross-platform, cross-engine compatible. Next is
available in both WebKit and WebEngine flavors. Support for graphics
and OS integration is provided via:

+ macOS: Qt
+ GNU/Linux: Qt or GTK

** Installing SBCL
You can obtain SBCL from your package manager or by downloading it
directly from the SBCL repository.

To install SBCL from source, download SBCL:
[[http://www.sbcl.org/platform-table.html]]. Full installation
instructions can be found here: [[http://www.sbcl.org/getting.html]].

** Installing Quicklisp (optional)
Quicklisp is downloaded and installed automatically by the
Makefile. If you wish to install it manually, system-wide, the
official Quicklisp website can provide updated links to downloads, and
instructions: https://www.quicklisp.org

To install Quicklisp:
- Download https://beta.quicklisp.org/quicklisp.lisp.
- Execute ~$LISP --load quicklisp.lisp~ to load Quicklisp. (Replace =$LISP= with
  =sbcl= or any supported Lisp compiler.)
- Evaluate in the REPL ~(quicklisp-quickstart:install)~ to install.
- Evaluate in the REPL ~(ql:add-to-init-file)~ to add Quicklisp to your Lisp init file.

** GNU/Linux specific dependencies
- WebKitGTK+ also known as webkit2gtk (make sure to use the most
  recent version for security reasons -- /Debian Stable won't do/)
- SQLite
- glib-networking (for WebKitGTK+)
- gsettings-desktop-schemas (for WebKitGTK+)
- libfixposix
- gstreamer, gst-plugins-* (for HTML audio/video)
- xclip (for clipboard support)

If your distribution does not install libraries in an [[https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard][FHS]]-expected location, you
have to let know your Lisp compiler where to find them.  To do so, add the
library directories to ~cffi:*foreign-library-directories*~ list.  For instance,
if you are running Guix you may want to expose =~/.guix-profile/lib= to the
compiler by adding the following snippet to =~/.sbclrc=:

#+begin_src lisp
(require "asdf")

(let ((guix-profile (format nil "~a/.guix-profile/lib/" (uiop:getenv "HOME"))))
  (when (and (probe-file guix-profile)
             (ignore-errors (asdf:load-system "cffi")))
    (push guix-profile
          (symbol-value (find-symbol (string '*foreign-library-directories*)
                                     (find-package 'cffi))))))
#+end_src

Install the WebKitGTK+ package of your distribution that provides
~libwebkit2gtk-4.0.so~ (the shared library for WebKitGTK+).

- For most Debian-based systems (including Ubuntu) this package is
  ~libwebkit2gtk-4.0-dev~.  /Debian Stable is not supported/.  Debian users are
  advised to use more up-to-date packages from Debian Testing at least.
- For Arch Linux this package is [[https://www.archlinux.org/packages/extra/x86_64/webkit2gtk/][webkit2gtk]].

#+begin_quote
A note of caution about installing WebKit via your package
manager: Your distribution supplied version of WebKit may not provide
up-to-date versions of WebKit including the latest security
patches. WebKitGTK+ tries to do the best job possible with maintaining
security patches upstream, but it is also up to the the
distribution provider to update their packages to take advantage of
these fixes.
#+end_quote

** macOS specific dependencies
+ Qt
+ D-Bus
+ [[https://github.com/sionescu/libfixposix][libfixposix]]
+ PyQt
+ Python 3.6
+ SQLite (available by default)

** Fetch the source code
Clone the Next repository into =~/common-lisp= or any directory listed in
~asdf:*central-registry*~:

#+begin_src sh
git clone https://github.com/atlas-engineer/next ~/common-lisp/next
#+end_src

** Compile
Next consists of two standalone executables: the Lisp core and the
platform port. There are two ways to build Next depending on if
you want to use [[https://github.com/roswell/roswell][Roswell]].

*** Compile Image with a Lisp Implementation

The following command will build both Lisp core and the platform
port. On macOS this will produce an application bundle which you can
copy into your =/Applications= folder. Before you can run Next on
macOS, you may have to modify the
=#!/path/to/your/python/installation= at the top of
=Next.app/Contents/MacOS/next-pyqt-webengine=.

- GNU/Linux:
#+BEGIN_SRC sh
make all
#+END_SRC

- macOS:
#+BEGIN_SRC sh
make all
#+END_SRC

Inside the Makefile you'll find many options you can specify. You can
specify to use your Lisp's init file, to use your global installation
of Quicklisp, or to automatically download and install a separate
Quicklisp installation for Next. Run ~make~ to display some
documentation. Please see the Makefile for more details.

*** Compile with Roswell

Roswell can be used to build the Lisp core. This method uses the existing
systems installed on your system.

A Roswell script is provided under the =./build-scripts/=. You have to make sure
that this project can be found by Roswell (Quicklisp). You may create a
symbolic link of this project in the =~/.roswell/local-projects/= directory to
do so.

In order to compile the Lisp core, simply run:

#+BEGIN_SRC sh
ros build build-scripts/next.ros
#+END_SRC

An executable file named =./build-scripts/next= will be generated under the project root.

Afterwards, you need to build the platform port:

#+BEGIN_SRC sh
make install-gtk-webkit
#+END_SRC

You may simply type =make= to display documentation.

Please refer to the next section to make the two parts work together.

** Run

The compilation must have produced two executables:

- =next= in the root folder.
- A platform port executable in the appropriate =ports/= subfolder.

For =next= to work, it must find the platform port.  There are a few options:

- Either specify the path in your Next config file (=~/.config/next/init.lisp=):
  #+BEGIN_SRC lisp
(in-package :next)

;; Use development platform port.
(setf (get-default 'port 'path)
      "~/common-lisp/next/ports/gtk-webkit/next-gtk-webkit")
;; ...
  #+END_SRC

- Or add the appropriate platform-port folder (e.g. the GTK or Qt
  platform-port application) to your =$PATH=. For instance you can add
  #+BEGIN_SRC sh
  export PATH=$PATH:/path/to/next/ports/gtk-webkit
  #+END_SRC
  to your user initialization file.

- Or install the platform-port executable into an well known =$PATH= folder, for
  instance =/usr/local/bin=.

Now go ahead and start =path/to/next/next=!

** Run from Source

If you are developing Next, you might prefer to run Next directly from
source so that you can skip the compilation step and iterate faster.

First, make sure the platform port is properly installed as explained in the
previous section.

Second, make sure that Quicklisp is set up as explained in the Quicklisp section.

Then in a shell execute the following:

1. ~$LISP~ to create a new Lisp REPL (replace ~$LISP~ with ~sbcl~ or any
   supported Common Lisp compiler).
2. Execute ~(ql:quickload "trivial-features")~.
3. Execute ~(require :asdf)~ if ASDF is not already loaded.
4. Execute ~(asdf:load-asd "/full/path/to/next.asd")~ to load the Next
   system definition (you can not use relative pathnames).
5. Execute ~(ql:quickload :next)~ to load the Next system into your
   Lisp image.
6. Make sure the platform port can be found by Next, as described
   in the previous section.
7. Execute ~(next:start)~ to open your first Next window.

The above process is a bit cumbersome and you'll probably want a more
comfortable workflow from within your favourite editor.  For instance, with
Emacs and SLIME the process boils down to:

1. =M-x slime RET=
2. =,load-system RET next RET=
3. =(next:start) RET=

See the [[https://lispcookbook.github.io/cl-cookbook/editor-support.html][Common Lisp Cookbook]] for a list of options for various editors.

** Update local Lisp libraries

If you use Quicklisp for Common Lisp library management outside the context of
Next, you may want to reuse your local distribution to build Next.

To do so, invoke =make= with the following option:

#+begin_src sh
make NEXT_INTERNAL_QUICKLISP=false ...
#+end_src

In this case, you'll have to make sure the Quicklisp distribution is up-to-date
or else future versions of Next might fail to build.  In a REPL:

#+begin_src lisp
(ql:update-dist "quicklisp")
#+end_src

If you use the internal Quicklisp distribution (i.e. with the default
=NEXT_INTERNAL_QUICKLISP=true=), the distribution is updated automatically for
you.

* Help & Community
There are several ways to ask for help from the community. The first
and easiest one is to simply open up an issue with whatever problem
you have. Feel free to open issues for any task, suggestion or
conversation you wish to have.

** Learning Common Lisp

There are a couple of resources out there to learn Common Lisp.

- The [[https://lispcookbook.github.io/cl-cookbook/][Common Lisp Cookbook]] is a modern, community maintained resource covering
  many aspects of Common Lisp programming and beyond, from editor setup to
  style.  The front page lists many other resources for learning, such as books
  (some available for free) and other web sites.  If you already know another
  Lisp/Scheme, the cookbook can serve as a good crash course.

- [[http://www.gigamonkeys.com/book/][Practical Common Lisp]] is a popular book available for free.  It assumes you
  already know programming.  It gives a good coverage of the "core" of the
  language and goes to the point.

** Contribution
To contribute, please find a task within [[file:CHANGELOG.org][CHANGELOG.org]] document that has a TASK
label affixed. Upon finding a task that you'd like to work on,
ideally, ensure that it is not already being worked on.

After you have found a TASK item that is available:

- make a fork of the repository,
- add your changes,
- make a pull request.

** IRC Channel
You can find Next on Freenode IRC at =#next-browser=.
