* Next Developer Readme                                                 :TOC:
- [[#developer-installation-with-guix][Developer Installation with Guix]]
- [[#generic-developer-installation][Generic Developer Installation]]
  - [[#installing-sbcl][Installing SBCL]]
  - [[#manually-installing-quicklisp-optional][Manually Installing Quicklisp (optional)]]
  - [[#gnulinux-dependencies][GNU/Linux dependencies]]
  - [[#compile][Compile]]
  - [[#run][Run]]
  - [[#run-from-source][Run from Source]]
- [[#help--community][Help & Community]]
  - [[#contribution][Contribution]]
  - [[#irc-channel][IRC Channel]]

* Developer Installation with Guix
Install [[http://guix.info][Guix or GuixSD]] and follow the instructions in ../guix.scm.

* Generic Developer Installation
Next is written in Common Lisp. It can be built with any standard
Common Lisp implementation. Currently, only [[http://www.sbcl.org/][SBCL]] support is tested.

It is designed to be cross-platform compatible. Support for graphics is
provided via QT for MacOS and GTK for GNU/Linux.

When using Next with Emacs/Slime, make sure to have the following
configuration set in your =.swank.lisp=.

#+NAME: config
#+BEGIN_SRC language
(setf swank:*globally-redirect-io* t)
(setf swank:*communication-style* :fd-handler)
#+END_SRC

** Installing SBCL
You can obtain SBCL either from your package manager or by downloading
it directly from the SBCL repository.

To install SBCL via Macports:
- =port install sbcl=

To install SBCL via Homebrew:
- =brew install sbcl=

To install SBCL from source, Download SBCL:
[[http://www.sbcl.org/platform-table.html]], full installation
instructions can be found here: [[http://www.sbcl.org/getting.html]].

** Manually Installing Quicklisp (optional)
The official Quicklisp website can provide updated links
to downloads, and instructions:

https://www.quicklisp.org

To install Quicklisp:

- Download https://beta.quicklisp.org/quicklisp.lisp.
- Execute ~sbcl --load quicklisp.lisp~ to load Quicklisp.
- Evaluate in the REPL ~(quicklisp-quickstart:install)~ to install.
- Evaluate in the REPL ~(ql:add-to-init-file)~ to add Quicklisp to your Lisp init file.

More detailed instructions and other resources are readily available
on the Quicklisp website.

** GNU/Linux dependencies
- WebKitGTK+ also known as webkit2gtk (make sure to use the most
  recent version for security reasons -- /Debian Stable won't do/)
- SQLite
- glib-networking (for WebKitGTK+)
- gsettings-desktop-schemas (for WebKitGTK+)
- libfixposix
- gstreamer, gst-plugins-* (for HTML audio/video)

If your distribution does not install libraries in a [[https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard][FHS]]-expected location, you
have to let know your Lisp compiler where to find them.  To do so, add the
library directories to ~cffi:*foreign-library-directories*~ list.  For instance,
if you are running Guix you may want to expose =~/.guix-profile/lib= to the
compiler by adding the following snippet to =~/.sbclrc=:

#+begin_src lisp
(require "asdf")

(let ((guix-profile (format nil "~a/.guix-profile/lib/" (uiop:getenv "HOME"))))
  (when (and (probe-file guix-profile)
             (ignore-errors (asdf:load-system "cffi")))
    (push guix-profile
          (symbol-value (find-symbol (string '*foreign-library-directories*)
                                     (find-package 'cffi))))))
#+end_src

Install the WebKitGTK+ package of your distribution that provides
~libwebkit2gtk-4.0.so~ (the shared library for WebKitGTK+).

- For most Debian-based systems (including Ubuntu) this package is
  ~libwebkit2gtk-4.0-dev~.  /Debian Stable is not supported/.  Debian users are
  advised to use more up-to-date packages from Debian Testing at least.
- For Arch Linux this package is [[https://www.archlinux.org/packages/extra/x86_64/webkit2gtk/][webkit2gtk]].

#+begin_quote
A note of caution about installing WebKit via your package
manager: Your distribution supplied version of WebKit may not provide
up-to-date versions of WebKit including the latest security
patches. WebKitGTK+ tries to do the best job possible with maintaining
security patches upstream, but it is also additionally up to the the
distribution provider to update their packages to take advantage of
these fixes.
#+end_quote

** Compile

The Next program consists of 2 dedicated executable files: the Lisp core and
the WebKit port. There are 2 ways to build them according to whether you want
to use [[https://github.com/roswell/roswell][Roswell]].

*** Not Using Roswell

The following command will build both Lisp core and the WebKit port.

- GNU/Linux:
#+BEGIN_SRC sh
make all
#+END_SRC

- MacOS:

Pending the QT Port Completion

If you look within the Makefile you'll find many options you can
specify. You can specify to use your Lisp's init file, to use your
global installation of Quicklisp, or to automatically download and
install a separate Quicklisp installation for Next. Run ~make~ to display some
documentation. Please see the Makefile for more details.

*** Using Roswell

Roswell can be used to build the Lisp core. A Roswell script is provided under
=roswell/= directory. In order to compile it, simple run:

#+BEGIN_SRC sh
ros build next.ros
#+END_SRC

An executable file will be generated under =roswell/= directory. Please note
that this method uses the systems maintained by the Roswell.

Afterwards, you need to build the WebKit port:

#+BEGIN_SRC sh
make install-gtk-webkit
#+END_SRC

Please refer to the next section to make the 2 parts work together.

** Run

The compilation must have produced two executables:

- =next= in the root folder.
- A platform port executable in the appropriate =ports/= subfolder.

For =next= to work, it must find the platform port.  There are a few options:

- Either specify the path in your Next config file (=~/.config/next/init.lisp=):
  #+BEGIN_SRC lisp
(in-package :next)

;; Use development platform port.
(setf (get-default 'port 'path)
      (format nil "~a/common-lisp/next/ports/gtk-webkit/next-gtk-webkit"
              (uiop:getenv "HOME")))
;; ...
  #+END_SRC

- Or add the appropriate platform-port folder (e.g. the GTK or QT
  platform-port application) to your =$PATH=. For instance you can add
  #+BEGIN_SRC sh
  export PATH=$PATH:/path/to/next/ports/gtk-webkit
  #+END_SRC
  to your user initialization file.

- Or install the platform-port executable into an well known =$PATH= folder, for
  instance =/usr/local/bin=.

Now go ahead and start =path/to/next/next=!

** Run from Source

If you are developing Next, you might prefer to directly run Next from the
source so that you can skip the compilation step and iterate faster.

First, make sure the platform port is properly installed as explained in the
previous section.

Second, make sure that Quicklisp is set up as explained in the Quicklisp section.

Then in a shell execute the following:

1. ~$LISP~ to create a new Lisp REPL (replace ~$LISP~ with ~sbcl~ or any
   supported Common Lisp compiler).
2. Execute ~(require :asdf)~ if ASDF is not already loaded.
3. Execute ~(asdf:load-asd "/full/path/to/next.asd")~ to load the Next
   system definition (you can not use relative pathnames).
4. Execute ~(ql:quickload :next)~ to load the Next system into your
   Lisp image.
5. Start the platform port and make sure it will be found by Next as described
   in the previous section.
6. Execute ~(next:start)~ to open your first Next window.

* Help & Community
There are several ways to ask for help from the community. The first
and easiest one is to simply open up an issue with whatever problem
you have. Feel free to open issues for any task, suggestion or
conversation you wish to have.

** Contribution
To contribute, please find a task within [[file:CHANGELOG.org][CHANGELOG.org]] document that has a TASK
label affixed. Upon finding a task that you'd like to work on,
ideally, ensure that it is not already being worked on.

After you have found a TASK item that is available:

- make a fork of the repository,
- add your changes,
- make a pull request.

** IRC Channel
You can find Next on Freenode IRC at =#next-browser=.
