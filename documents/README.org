* Nyxt Developer Readme                                                 :TOC:
:PROPERTIES:
:TOC:      :include all
:END:
:CONTENTS:
- [[#nyxt-developer-readme][Nyxt Developer Readme]]
- [[#developer-installation-with-guix][Developer Installation with Guix]]
- [[#standard-developer-installation][Standard Developer Installation]]
  - [[#installing-sbcl][Installing SBCL]]
  - [[#installing-quicklisp-optional][Installing Quicklisp (optional)]]
  - [[#gtk-dependencies][GTK dependencies]]
    - [[#lisp-dependencies][Lisp Dependencies]]
    - [[#gnulinux-gtk-dependencies][GNU/Linux GTK dependencies]]
    - [[#macos-specific-dependencies][macOS specific dependencies]]
  - [[#qt-dependencies][Qt dependencies]]
    - [[#lisp-dependencies][Lisp Dependencies]]
    - [[#gnulinux-dependencies][GNU/Linux dependencies]]
    - [[#macos-dependencies][macOS dependencies]]
  - [[#fetch-the-source-code][Fetch the source code]]
  - [[#compile][Compile]]
    - [[#using-the-makefile][Using the Makefile]]
    - [[#using-lisp][Using Lisp]]
  - [[#update-local-lisp-libraries][Update local Lisp libraries]]
- [[#run-nyxt-in-a-security-sandbox][Run Nyxt in a security sandbox]]
- [[#hacking][Hacking]]
  - [[#run-from-source][Run from Source]]
  - [[#slime-or-sly-with-a-compiled-version-of-nyxt][SLIME (or SLY) with a compiled version of Nyxt]]
- [[#help--community][Help & Community]]
  - [[#learning-common-lisp][Learning Common Lisp]]
  - [[#contribution][Contribution]]
  - [[#irc-channel][IRC Channel]]
:END:

* Developer Installation with Guix
First, clone the Nyxt repository.  It is most convenient to clone the Nyxt
repository into =~/common-lisp= (or [[https://www.common-lisp.net/project/asdf/asdf.html#Configuring-ASDF-to-find-your-systems][another directory where ASDF will find it]]).

Second, install [[https://guix.gnu.org][Guix]] and follow the instructions in the
[[../build-scripts/guix.scm]] file of the Nyxt repository.

* Standard Developer Installation
Nyxt is written in Common Lisp. It can be built with any standard
Common Lisp implementation. Currently, only [[http://www.sbcl.org/][SBCL]] (≥ 1.4.2) support is
tested.

It is designed to be cross-platform, cross-engine compatible. Nyxt is
available in both WebKit and WebEngine flavors. Support for graphics
and OS integration is provided via:

- macOS: GTK, Qt
- GNU/Linux: GTK, Qt

** Installing SBCL
You'll need SBCL ≥ 1.4.2 to compile Nyxt.  (Previous versions require
an ASDF update.)

You can obtain SBCL from your package manager or by downloading it
directly from the SBCL repository.

To install SBCL from source, download SBCL:
[[http://www.sbcl.org/platform-table.html]]. Full installation
instructions can be found here: [[http://www.sbcl.org/getting.html]].

** Installing Quicklisp (optional)
Quicklisp is downloaded and installed automatically by the
Makefile. If you wish to install it manually- system-wide- the
official Quicklisp website can provide updated links to downloads, and
instructions: https://www.quicklisp.org.

To install Quicklisp:
- Download https://beta.quicklisp.org/quicklisp.lisp.
- Execute ~$LISP --load quicklisp.lisp~ to load Quicklisp. (Replace =$LISP= with
  =sbcl= or any supported Lisp compiler.)
- Evaluate in the REPL ~(quicklisp-quickstart:install)~ to install.
- Evaluate in the REPL ~(ql:add-to-init-file)~ to add Quicklisp to your Lisp init file.

** GTK dependencies
*** Lisp Dependencies
Nyxt on GTK requires the latest version of the cl-webkit library.
Clone the cl-webkit repository into =~/common-lisp= or any directory
listed in ~asdf:*central-registry*~:

#+begin_src sh
git clone https://github.com/joachifm/cl-webkit ~/common-lisp/cl-webkit
#+end_src

*** GNU/Linux GTK dependencies
- WebKitGTK+ also known as webkit2gtk (make sure to use the most
  recent version for security reasons)
- glib-networking (for WebKitGTK+)
- gsettings-desktop-schemas (for WebKitGTK+)
- libfixposix
- xclip (for clipboard support)
- notify-osd (optional)
- enchant (for spellchecking)

- Debian-based distributions:
  #+begin_src sh
  sudo apt install sbcl libwebkit2gtk-4.0-dev glib-networking gsettings-desktop-schemas libfixposix-dev xclip notify-osd enchant
  #+end_src

- Fedora:
  #+begin_src sh
  sudo dnf install sbcl webkit2gtk3-devel glib-networking gsettings-desktop-schemas libfixposix-devel xclip enchant
  #+end_src

If your distribution does not install libraries in an [[https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard][FHS]]-expected location, you
have to let know your Lisp compiler where to find them.  To do so, add the
library directories to ~cffi:*foreign-library-directories*~ list.  For instance,
if you are running Guix you may want to expose =~/.guix-profile/lib= to the
compiler by adding the following snippet to =~/.sbclrc=:

#+begin_src lisp
(require "asdf")

(let ((guix-profile (format nil "~a/.guix-profile/lib/" (uiop:getenv "HOME"))))
  (when (and (probe-file guix-profile)
             (ignore-errors (asdf:load-system "cffi")))
    (push guix-profile
          (symbol-value (find-symbol (string '*foreign-library-directories*)
                                     (find-package 'cffi))))))
#+end_src

Install the WebKitGTK+ package of your distribution that provides
~libwebkit2gtk-4.0.so~ (the shared library for WebKitGTK+).

- For most Debian-based systems (including Ubuntu) this package is
  ~libwebkit2gtk-4.0-dev~.  Debian stable users are advised to make sure they
  use a recent-enough version, otherwise consider Debian Testing at least.
- For Arch Linux this package is [[https://www.archlinux.org/packages/extra/x86_64/webkit2gtk/][webkit2gtk]].

#+begin_quote
A note of caution about installing WebKit via your package
manager: Your distribution supplied version of WebKit may not provide
up-to-date versions of WebKit including the latest security
patches. WebKitGTK+ tries to do the best job possible with maintaining
security patches upstream, but it is also up to the the
distribution provider to update their packages to take advantage of
these fixes.
#+end_quote

*** macOS specific dependencies
- GTK 3.24.12+
- WebKitGTK+
- XQuartz
- libfixposix

** Qt dependencies
*** Lisp Dependencies
Nyxt on Qt requires the latest version of the cl-webengine library.
Clone the cl-webengine repository into =~/common-lisp= or any
directory listed in ~asdf:*central-registry*~:

#+begin_src sh
git clone git@github.com:atlas-engineer/cl-webengine.git ~/common-lisp/cl-webengine
#+end_src

Please follow the instructions in the cl-webengine repository for
details about how to install it on your system.

*** GNU/Linux dependencies
- Qt 5 (qtbase, qtwebchannel, qtdeclarative)
- Qt 5 WebEngine
- libfixposix
- xclip (for clipboard support)
- notify-osd (optional)
- enchant (for spellchecking)

*** macOS dependencies
- Qt 5.14.0+
- Qt WebEngine
- libfixposix

** Fetch the source code
Clone the Nyxt repository into =~/common-lisp= or any directory listed in
~asdf:*central-registry*~:

#+begin_src sh
mkdir -p ~/common-lisp
git clone https://github.com/atlas-engineer/nyxt ~/common-lisp/nyxt
#+end_src

** Compile
*** Using the Makefile
The following command will build the Lisp core. On macOS this will produce an
application bundle which you can copy into your =/Applications= folder.

- GNU/Linux:
#+BEGIN_SRC sh
make all
#+END_SRC

- macOS:
#+BEGIN_SRC sh
make all
make app-bundle
#+END_SRC

Inside the Makefile you'll find many options you can specify. You can
specify to use your Lisp's init file, to use your global installation
of Quicklisp, or to automatically download and install a separate
Quicklisp installation for Nyxt. Run ~make~ to display some
documentation. Please see the Makefile for more details.
*** Using Lisp
Start your Lisp and run the following commands:

#+NAME: compile
#+BEGIN_SRC lisp
(asdf:make :nyxt/gtk-application)
#+END_SRC

your Lisp interpreter will have produced an executable in the
directory where the asd file is located. You can also compile the Qt
version like this:

#+NAME: compile
#+BEGIN_SRC lisp
(asdf:make :nyxt/qt-application)
#+END_SRC

** Update local Lisp libraries
If you use Quicklisp for Common Lisp library management outside the
context of Nyxt, you may want to reuse your local distribution to
build Nyxt.

To do so, invoke =make= with the following option:

#+begin_src sh
make NYXT_INTERNAL_QUICKLISP=false ...
#+end_src

In this case, you'll have to make sure the Quicklisp distribution is
up-to-date or else future versions of Nyxt might fail to build.  In a
REPL:

#+begin_src lisp
(ql:update-dist "quicklisp")
#+end_src

If you use the internal Quicklisp distribution (i.e. with the default
=NYXT_INTERNAL_QUICKLISP=true=), the distribution is updated
automatically for you.

You will also need to manually update the [[Lisp specific dependencies]].

* Run Nyxt in a security sandbox
For improved security while you browse the Internet, you can run Nyxt in a
container on GNU/Linux.

- With Guix:
  #+begin_src sh
  guix environment --container --network --expose=/etc/ssl/certs --ad-hoc coreutils nss-certs nyxt -- env DISPLAY="$DISPLAY" nyxt
  #+end_src

  If you want to load your configuration and use the data files:

  #+begin_src sh
  guix environment --container --network --expose=/etc/ssl/certs --expose="$HOME/.config/nyxt/" --share="$HOME/.local/share/nyxt"="$HOME/.local/share/nyxt/" --ad-hoc coreutils nss-certs nyxt -- env DISPLAY="$DISPLAY" nyxt
  #+end_src

  If you get an error like

  : libGL error: failed to open /dev/dri/card0: No such file or directory

  add the =--expose=/dev/dri/card0= option (change the path accordingly).

- With [[https://firejail.wordpress.com/][Firejail]].

* Hacking

** Run from Source
If you are developing Nyxt, you may prefer to run Nyxt directly from
source so that you can skip the compilation step and iterate faster.

Make sure that Quicklisp is set up and up-to-date (see [[Update local Lisp
libraries]]) as explained in the Quicklisp section.

Then in a shell execute the following:

1. ~$LISP~ to create a new Lisp REPL (replace ~$LISP~ with ~sbcl~ or any
   supported Common Lisp compiler).
2. Execute ~(require :asdf)~ if ASDF is not already loaded.
3. Execute ~(asdf:load-asd "/full/path/to/nyxt.asd")~ to load the Nyxt
   system definition (you must use absolute pathnames).
4. Execute ~(ql:quickload :nyxt/gtk)~ to load the Nyxt system into your
   Lisp image.
5. Execute ~(nyxt:start)~ to open your first Nyxt window.

The above process is a bit cumbersome and you'll probably want a more
comfortable workflow from within your favourite editor.  See the section about
Emacs and SLIME, or see the [[https://lispcookbook.github.io/cl-cookbook/editor-support.html][Common Lisp Cookbook]] for a list of options for
various editors.

** SLIME (or SLY) with a compiled version of Nyxt
=SLIME= provides a way of interacting with Nyxt, and with Lisp code in
general (e.g. in a [[https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop][REPL]]). =SLY= is a fork of =SLIME= with additional functionality.

From the SLIME manual:
#+begin_quote
SLIME extends Emacs with support for interactive programming in Common
Lisp. The features are centered around slime-mode, an Emacs minor-mode
that complements the standard lisp-mode. While lisp-mode supports
editing Lisp source files, slime-mode adds support for interacting
with a running Common Lisp process for compilation, debugging,
documentation lookup, and so on.
#+end_quote

To use SLIME with a compiled version of Nyxt run the command
=start-swank= launch a Swank server. SLIME will connect to the Swank
server and give you completion, debugging, documentation, etc. The
port for Swank is define in ~*swank-port*~ and its default value is
different from that of Swank on Emacs to avoid collisions with an
Emacs ~*inferior-lisp*~ process.

After launching the Swank server in Nyxt, execute the following within Emacs:

1. ~M-x~
2. ~slime-connect~
3. Enter ~127.0.0.1~ for the host
4. Enter the port number set in the Nyxt variable ~*swank-port*~ (e.g. ~4006~)

To customize the port that Swank starts on, edit the global variable
~*swank-port*~ in your init file.

To use =SLY= instead of =SLIME=, you have to add the function =start-slynk= in your =init.lisp=:
#+begin_src lisp
(load-system :slynk)
(when (load-system :slynk)
  (define-command start-slynk (&optional (slynk-port *swank-port*))
    "Start a Slynk server that can be connected to, for instance, in
Emacs via SLY.

Warning: This allows Nyxt to be controlled remotely, that is, to
execute arbitrary code with the privileges of the user running Nyxt.
Make sure you understand the security risks associated with this
before running this command."
      (slynk:create-server :port slynk-port :dont-close t)
      (echo "Slynk server started at port ~a" slynk-port)))
#+end_src

Use like for =SLIME=, substituting =start-slynk= for =start-swank= in Nyxt, and =sly-connect= for =slime-connect= in Emacs.

* Help & Community
There are several ways to ask for help from the community. The first
and easiest one is to simply open up an issue with whatever problem
you have. Feel free to open issues for any task, suggestion or
conversation you wish to have.

** Learning Common Lisp
There are a couple of resources out there to learn Common Lisp.

- [[http://www.gigamonkeys.com/book/][Practical Common Lisp]] is a popular book available for free.  It
  assumes you already know programming.  It gives a good coverage of
  the "core" of the language and goes to the point.

- The [[https://lispcookbook.github.io/cl-cookbook/][Common Lisp Cookbook]] is a modern, community maintained resource
  covering many aspects of Common Lisp programming and beyond, from
  editor setup to style.  The front page lists many other resources
  for learning, such as books (some available for free) and other web
  sites.  If you already know another Lisp/Scheme, the cookbook can
  serve as a good crash course.

** Contribution
To contribute, please find a task [[https://github.com/atlas-engineer/nyxt/issues?q=is%3Aissue+is%3Aopen+label%3Agood-first-issue][on our issue tracker]] or within [[file:CHANGELOG.org][CHANGELOG.org]]
document that has a TASK label affixed. Upon finding a task that you'd like to
work on, ideally, ensure that it is not already being worked on.

After you have found a TASK item that is available:

- make a fork of the repository,
- add your changes,
- make a pull request.

** IRC Channel
You can find Nyxt on Freenode IRC at =#nyxt-browser=.


# Local Variables:
# before-save-hook: org-make-toc
# End:
