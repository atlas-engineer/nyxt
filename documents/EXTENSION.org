#+TITLE: Next Extension Expos√©
This Document is a place for users of Next to share useful
customizations as a community. If you have something you wish to add,
please feel free to open a PR with your customization.

* Contents                                                              :TOC:
- [[#setting-the-start-page][Setting the start page]]
- [[#creating-your-own-parenscript][Creating your own Parenscript]]
- [[#running-shell-commands-within-next][Running shell commands within Next]]
- [[#reloading-the-page][Reloading the page]]
- [[#scroll-the-page-up-and-down-by-a-screen][Scroll the page up and down by a screen]]

* Setting the start page
Setting the start page can easily be achieved in the following manner:

#+NAME: start-page-set
#+BEGIN_SRC lisp
(defun my-interface-defaults ()
  (setf (start-page-url *interface*) "about:blank"))

(hooks:add-to-hook '*after-init-hook* #'my-interface-defaults)
#+END_SRC

* Creating your own Parenscript
You can call any parenscript within the browser through the convient
~define-parenscript~ macro. A really simple example below
shows how you could set the body with the URL of the current page.

#+NAME: hell-url
#+BEGIN_SRC lisp
(define-parenscript hello-url ()
  (defun set-body (text)
    (setf (ps:chain document body inner-text) text)
    ;; return nil to avoid json decode errors
    nil)
  (set-body (ps:chain document -u-r-l)))
#+END_SRC

A ~define-parenscript~ without arguments will automatically generate a
~defparameter~ named ~hello-url~ with the actual Javascript, and a function
~(hello-url)~ that you can invoke to act upon the currently active buffer.

* Running shell commands within Next
Shell mode is an extension for running simple one liner shell commands
and seeing the output. There is no history or variables. Use ~C-x s~
to enter a ~*shell*~ buffer, ~c~ to enter a command and ~k~ to clear
the command output.

#+NAME: shell-mode
#+BEGIN_SRC lisp
(define-mode shell-mode ()
    "A basic shell prompt."
    ((keymap-schemes
      :initform
      (let ((map (make-keymap)))
        (define-key :keymap map
          "c" 'run-shell-command
          "k" 'clear-shell)
        (list :emacs map
              :vi-normal map)))))

(define-parenscript clear-shell-output ()
    (setf (ps:chain document body inner-h-t-m-l) ""))

(define-command clear-shell (shell-mode)
  "Clear the output in the shell buffer."
  (rpc-buffer-evaluate-javascript
   *interface* (active-buffer *interface*)
   (clear-shell-output)))

(define-parenscript append-output (output)
  (setf (ps:chain document body inner-h-t-m-l)
        (ps:chain document body inner-h-t-m-l
                  (concat (ps:lisp
                           (format nil "<pre><code>~a</code></pre><br/>" output))))))

(define-command run-shell-command (shell-mode)
  "Run a shell command."
  (with-result
      (input (read-from-minibuffer
              (minibuffer *interface*)
              :input-prompt "Run in shell:"))
    (rpc-buffer-evaluate-javascript
     *interface* (active-buffer *interface*)
     (append-output
      :output
      (uiop:run-program input :force-shell t :output :string)))))

(define-command shell ()
  "Open a shell buffer."
  (set-active-buffer *interface* (make-buffer :name "*shell*" :default-modes '(shell-mode))))

(define-key :keymap *my-keymap* "C-x s" #'shell)
#+END_SRC

* Reloading the page
The following function provides a way to reload the current page.

#+NAME: reload-page
#+BEGIN_SRC lisp
;; Reload page with C-r
(define-parenscript %reload-page ()
  (ps:chain location (reload)))

(define-command reload-page ()
  "Reload page."
  (%reload-page))

(define-key :keymap *my-keymap* "C-r" #'reload-page)
#+END_SRC

* Scroll the page up and down by a screen
You can use the following functions to scroll the page up or down by
one screen.

#+NAME: scroll-page-up-and-down
#+BEGIN_SRC lisp
(define-parenscript %scroll-page-down ()
  (ps:chain window (scroll-by 0 (ps:@ window inner-height))))

(define-parenscript %scroll-page-up ()
  (ps:chain window (scroll-by 0 (- (ps:@ window inner-height)))))

(define-command scroll-page-down ()
  "Scroll down by one page height."
  (%scroll-page-down))

(define-command scroll-page-up ()
  "Scroll up by one page height."
  (%scroll-page-up))

;; Bind the new functions.
(define-key :keymap *my-keymap* "C-v" #'scroll-page-down)
(define-key :keymap *my-keymap* "M-v" #'scroll-page-up)
#+END_SRC
