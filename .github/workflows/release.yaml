# Inspired by
# https://github.com/guix-science/guix-science/blob/master/.github/workflows/build.yml
# and
# https://github.com/PromyLOPh/guix-install-action

name: Releases

on:
  push:
    tags: '*'
    ## To test, uncomment the line below with branch name used for review.
    branches: [ flatpak ]

jobs:
  build-binaries:
    name: ${{ matrix.lisp }} on ${{ matrix.os }}
    strategy:
      matrix:
        lisp: [sbcl]
        # See https://github.com/actions/virtual-environments
        # for the list of official distributions.
        os: [ubuntu-20.04]
      # fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:

    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install SBCL and dependencies
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y git-core flatpak

    - name: Build flatpak
      shell: bash
      # Don't run scripts with `sudo` since it would use /root as home instead
      # of the runner's /home/runner.
      run: |
        make flatpak-build
        make flatpak-repository
        make flatpak-bundle

    - name: Guix cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/guix
        # use a key that (almost) never matches
        key: guix-cache-${{ github.sha }}
        restore-keys: |
          guix-cache-
    # Cannot use a cache for /gnu/store, since restore fails
    - name: Install Guix
      uses: PromyLOPh/guix-install-action@v1
    - name: Ensure no locale warning
      run: test -z "$(guix --version 2>&1 >/dev/null)"
    - name: Build Guix package
      run: |
          guix shell --container -D -f build-scripts/nyxt.scm --user=dummy-user guix -- make all NYXT_SUBMODULES=false

    - name: Generate version file
      shell: bash
      run: echo $(./nyxt --version | cut -d' ' -f3) > version
    # Balance out '.
    - name: Pack (Relocatable Binary)
      shell: bash
      run: |
        echo "Command: guix pack -RR --no-grafts --compression=xz --symlink=/usr/local/bin/nyxt=bin/nyxt --root=nyxt-$(cat version).tar.xz -L build-scripts/ nyxt" >> guix-recipe.txt
        guix pack -RR --no-grafts --compression=xz --symlink=/usr/local/bin/nyxt=bin/nyxt --root=nyxt-$(cat version).tar.xz -L build-scripts/ nyxt > store-path.txt
    - name: Generate release notes
      shell: bash
      run: |
        echo "Release notes: https://nyxt.atlas.engineer/article/release-$(cat version).org" >> release.txt
        echo "" >> release.txt
        echo "For Ubuntu 22.04: the .deb file depends on libssl1.1.  To install it:" >> release.txt
        echo "    $ wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb" >> release.txt
        echo "    $ sudo dpkg -i ./libssl1.1_1.1.0g-2ubuntu4_amd64.deb" >> release.txt
        echo "" >> release.txt
        echo "To compile from source, prefer the tarball including the submodules if you don't manage the Lisp dependencies yourself." >> release.txt
    - name: Generate Guix pack reproduction recipe
      shell: bash
      run: |
        sha256sum nyxt-*.tar.xz > nyxt-$(cat version).tar.xz.sha256sum
        echo "Store path: $(cat store-path.txt)" >> guix-recipe.txt
        echo "Guix describe: $(guix describe)" >> guix-recipe.txt
    - name: Generate source archive with submodules
      shell: bash
      run: git ls-files --recurse-submodules | tar caf nyxt-$(cat version)-source-with-submodules.tar.xz -T-

    - name: Release
      uses: ncipollo/release-action@v1
      with:
        bodyFile: release.txt
        artifacts: "nyxt-*.tar.xz*,guix-recipe.txt,*.flatpak"
