# Inspired by http://3bb.cc/blog/2020/09/11/github-ci/.
name: Tests

on:
  push:
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: ${{ matrix.lisp }} on ${{ matrix.os }}
    strategy:
      matrix:
        lisp: [sbcl-bin ccl]
        os: [ ubuntu-latest ]

    # run the job on every combination of "lisp" and "os" above
    runs-on: ${{ matrix.os }}

    steps:
    # Check out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Cache .roswell
      id: cache-dot-roswell
      uses: actions/cache@v1
      with:
        path: ~/.roswell
        key: ${{ runner.os }}-dot-roswell-${{ matrix.lisp }}-${{ hashFiles('**/*.asd') }}
        restore-keys: |
          ${{ runner.os }}-dot-roswell-${{ matrix.lisp }}-
          ${{ runner.os }}-dot-roswell-

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y git
        sudo apt-get install -y libfixposix3 libfixposix-dev libwebkit2gtk-4.0-dev glib-networking gsettings-desktop-schemas xclip enchant-2

    - name: Install Roswell
      shell: bash
      # always run install, since it does some global installs and setup that isn't cached
      env:
       LISP: ${{ matrix.lisp }}
      # TODO: Update Roswell to latest version (may need Ubuntu 20.* or above).
      run: curl -L https://raw.githubusercontent.com/roswell/roswell/v20.06.14.107/scripts/install-for-ci.sh | sh -x

    - name: Check Lisp
      continue-on-error: true
      shell: bash
      run: |
        ros -e '(format t "~a:~a on ~a~%...~%~%" (lisp-implementation-type) (lisp-implementation-version) (machine-type))'
        ros -e '(format t " fixnum bits:~a~%" (integer-length most-positive-fixnum))'
        ros -e "(ql:quickload 'trivial-features)" -e '(format t "features = ~s~%" *features*)'

    - name: Update Quickdist if we have one cached
      shell: bash
      run: ros -e "(ql:update-all-dists :prompt nil)"

    - name: Fetch Common Lisp third-party dependencies
      shell: bash
      run: |
        ros -e '(asdf:load-system :nyxt/submodules)'
        mkdir -p ~/.config/common-lisp/source-registry.conf.d/
        echo "(:tree \"$PWD/_build/submodules\")" > ~/.config/common-lisp/source-registry.conf.d/asdf.conf

    - name: Load system and run tests
      shell: bash
      # Export CI to tell ASDF to quit on test errors.
      env:
       NYXT_TESTS_ERROR_ON_FAIL: yes
      run: |
        ros -e '(asdf:load-system :nyxt/submodules)' -e '(handler-bind (#+asdf3.2 (asdf:bad-system-name (function MUFFLE-WARNING))) (handler-case (asdf:load-system :nyxt/tests) (error (a) (format t "caught error ~s~%~a~%" a a) (uiop:quit 17))))' -e '(asdf:test-system :nyxt)'

    - name: Compilation warnings
      shell: bash
      run: |
        ros -e '(asdf:load-system :nyxt/submodules)' -e '(load "build-scripts/report-warnings.lisp")' -e '(compilation-conditions "nyxt")' -e '(compilation-conditions "nyxt/gtk")'

  guix-test:
    name: Guix test
    runs-on: ubuntu-latest
    strategy:
      # building independent packages, donâ€™t abort entire build if one fails
      fail-fast: false
    steps:
      - name: Guix cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/guix
          # use a key that (almost) never matches
          key: guix-cache-${{ github.sha }}
          restore-keys: |
            guix-cache-
      - name: Install Guix
        uses: PromyLOPh/guix-install-action@v1
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build package
        run: |
            guix environment --container --user=dummy-user --load=build-scripts/nyxt.scm --ad-hoc guix -- make all NYXT_SUBMODULES=false CC=gcc
      - name: Run package
        # TODO: Test if nyxt --version and nyxt --help outputs are correct.
        run: ./nyxt --version
