Usage:

    make all                 # Create Nyxt.
    make install             # Install Nyxt.
    make doc                 # Generate Nyxt documentation (as a fallback).

Set DESTDIR to change the target destination.  It should be
an absolute path.

Set LISP and LISP_FLAGS to accommodate to your Lisp compiler.

Set NYXT_RENDERER to the renderer of your choice, e.g. "gtk".

Set NYXT_VERSION to force the version number instead of deriving it from Git.
This is useful for build systems without access to the .git metadata.

Set NYXT_COMPRESS to generate a compressed executable.  This
greatly reduces the file size at the expense of a slightly
increased startup time.  It's recommended to leave this off
on file systems with compression.

Set NYXT_TESTS_NO_NETWORK to disable tests that require networking.

Set NYXT_TESTS_ERROR_ON_FAIL to error out when a test fails.  This is useful for
continuous integration and build systems.

If NYXT_SUBMODULES is "true" (the default), all Lisp
dependencies will be fetched with `git submodules' into the
NYXT_SUBMODULES_DIR directory.

Otherwise, the dependencies will have to be locally installed
on your system.  You may have to accommodate the LISP_FLAGS
to use your local install of Quicklisp.  For example:

    make all NYXT_SUBMODULES=false LISP_FLAGS=

But in this case, you don't have to use `make' at all.  Instead, you could build
Nyxt with an invocation along these lines:

    sbcl --eval '(asdf:load-asd "'$(pwd)'/nyxt.asd")' --eval '(ql:quickload :nyxt/gi-gtk-application)' --quit

or, even shorter if Nyxt is checked out in a directory traversed by ASDF (like
~/common-lisp):

    sbcl --eval '(ql:quickload :nyxt/gi-gtk-application)' --quit

WARNING: Make sure your Quicklisp distribution is up-to-date when using
NYXT_SUBMODULES=false.  Also check the .gitmodules file for Common Lisp
libraries pinned to a version that may not be the same as the one in the latest
Quickdist.

The documentation generation is mostly useful if you cannot consult the
documentation in Nyxt itself.  Since the manual is normally dynamically
generated at runtime (for instance the paths and the bindings are printed
according to the user configuration), the static doc generation can only display
the default values.
