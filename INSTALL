Usage:

    make all                 # Create Nyxt.
    make web-extensions      # Build the _experimental_ library to enable WebExtension support.
    make install             # Install Nyxt (and the WebExtension library if built).
    make doc                 # Generate Nyxt documentation (as a fallback).

WARNING: WebExtension support is not included by default because it's unfinished
and possibly prone to security issues.  Use at your own risk!
See libraries/web-extensions/README.org for more details.

Set DESTDIR to change the target destination.  It should be
an absolute path.

Set NASDF_SOURCE_PATH to where the source files will be installed.
By default the GTK renderer loads the `libnyxt' library (enabling WebExtension
support) relatively to the nyxt.asd location.  You can also configure this at
runtime through the `gtk-extensions-directory' `resolve' method.

Set LISP and LISP_FLAGS to accommodate to your Lisp compiler.

Set NYXT_RENDERER to the renderer of your choice, for instance "gtk".

Set NYXT_VERSION to force the version number instead of deriving it from Git.
This is useful for build systems without access to the .git metadata.

Set NASDF_COMPRESS to a compression level (1-19 for Zstd, -1-9 for Zip, or T for
the default level) to generate a compressed executable.  This greatly reduces
the file size at the expense of a slightly increased startup time.  It's
recommended to leave this off on file systems with compression.

Set NASDF_TESTS_NO_NETWORK to disable tests that require networking.

Set NASDF_TESTS_QUIT_ON_FAIL to error out when a test fails.  This is useful for
continuous integration and build systems.

If NYXT_SUBMODULES is "true" (the default), all Lisp
dependencies will be fetched with `git submodules' into the
NASDF_SUBMODULES_DIR directory.

Otherwise, the dependencies will have to be locally installed
on your system.  You may have to accommodate the LISP_FLAGS
to use your local install of Quicklisp.  For example:

    make all NYXT_SUBMODULES=false LISP_FLAGS=

But in this case, you don't have to use `make' at all.  Instead, you could build
Nyxt with an invocation along these lines:

    export NASDF_USE_LOGICAL_PATHS=true # Dynamic relocation of the source code
    sbcl --non-interactive --no-userinit --eval '(require "asdf")' --eval '(asdf:make :nyxt/gi-gtk-application)' --quit

(Assuming Nyxt is checked out in a directory traversed by ASDF, like
~/common-lisp.)

WARNING: Make sure your Quicklisp distribution is up-to-date when using
NYXT_SUBMODULES=false.  Also check the .gitmodules file for Common Lisp
libraries pinned to a version that may not be the same as the one in the latest
Quickdist.

The documentation generation is mostly useful if you cannot consult the
documentation in Nyxt itself.  Since the manual is normally dynamically
generated at runtime (for instance the paths and the bindings are printed
according to the user configuration), the static doc generation can only display
the default values.
